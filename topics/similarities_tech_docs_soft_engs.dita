<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="similarities_tech_docs_soft_engs">
    <title>Similarities between Tech Docs Writers and Software Engineers</title>
    <prolog>
        <author>Radu Coravu</author>
        <critdates>
            <created date="2022-10-01"/>
        </critdates>
    </prolog>
    <body>
        <p>I'm a software engineer, working for Oxygen XML Editor and working along side my
            colleagues in developing tools used by technical documentation writers. I also do lots
            of technical support and sometimes I write small blog posts like this one or update our
            technical documentation. I'm a 10x developer in my very small field of expertise and a
            (1/10)x developer in all others.</p>
        <p>In time I've come to view the aspects of a technical writer's job (especially a tech
            writer who is using standards which have lots of potential for reuse like DITA XML)
            similar to many of the aspects of a software developer's job. So I started putting
            together a list of concepts and the way in which both these jobs (which may seem
            incompatible with each other at first) would utilize such concepts.</p>
        <p>
            <table frame="all" rowsep="1" colsep="1" id="table_xlq_sn5_yyb">
                <tgroup cols="3">
                    <colspec colname="c1" colnum="1" colwidth="1*"/>
                    <colspec colname="newCol2" colnum="2" colwidth="1*"/>
                    <colspec colname="c2" colnum="3" colwidth="1*"/>
                    <thead>
                        <row>
                            <entry>Concept</entry>
                            <entry>Software Engineers</entry>
                            <entry>Tech Docs Writer</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>Accessibility</entry>
                            <entry>We build our software products by following accessibility best
                                practices, we test our products using screen readers and collaborate
                                with our vision impaired users to fix accessibility problems. We
                                also try to make sure there is enough color contrast in the
                                application and ship various color themes for the
                                application.</entry>
                            <entry>Published technical documentation also needs to be accessible by
                                adding for example alternate text for images and using relevant text
                                for links. It's important also to consider the color theme of the
                                published output. <xref
                                    href="https://www.oxygenxml.com/doc/ug-webhelp-responsive/topics/whr-accessibility.html"
                                    format="html" scope="external">WebHelp</xref> and PDF outputs
                                obtained using Oxygen from DITA XML content are section 508
                                compliant.</entry>
                        </row>
                        <row>
                            <entry>Accurate and Concise Messages</entry>
                            <entry>We are required to present accurate and concise error messages,
                                dialogs, prompts to our end users. In time we've learned to pass
                                most of these error messages by our tech docs writers, asking their
                                opinion in order to improve them.</entry>
                            <entry>The technical documentation must also be accurate and concise.
                                The technical writer's advice can also greatly benefits the software
                                developers when they work in developing the messages in the
                                application.</entry>
                        </row>
                        <row>
                            <entry>Building Complex Systems from Basic Building Blocks</entry>
                            <entry>We build small components (classes) and then we use them to build
                                projects. We then use the many individual projects, to build entire
                                large products. <p>We keep the small components as simple as
                                    possible in order to maximize their reuse potential. With this
                                    simple components we build large complex projects.</p></entry>
                            <entry>Publications are built by using small topics of information or
                                small reusable elements like notes, tables. Even larger publications
                                can be built by combining the DITA Maps used to describe
                                subcomponents of the product. <p>Individual topics/tasks are small,
                                    simple and easy to follow. With these simple topics you can
                                    build large technical documentation projects.</p></entry>
                        </row>
                        <row>
                            <entry>Code Review</entry>
                            <entry>We have a stage where the code which was written by someone is
                                reviewed by a usually more experienced peer. The code reviewer may
                                propose various changes, either small message changes or changes
                                from the point of view of someone who knows better the architecture
                                of the project. There is also the possibility for a novice to code
                                review, this exposes them to new techniques and they also can give a
                                fresh perspective of things.</entry>
                            <entry>Having experienced technical writers review the work of novice
                                writers is a great way to accustom the novice writers to a certain
                                company specific way in which the content must be written.
                                Experienced tech writers can also better determine if the content
                                for example should be placed somewhere else in the project or if the
                                current topic should be split in multiple ones as they have a better
                                overall overview of the project.</entry>
                        </row>
                        <row>
                            <entry>Content Reuse</entry>
                            <entry>We reuse entire small projects in multiple products. We reuse
                                libraries, classes, functions. Content reuse gives us the ability to
                                build products faster and to build different products from the same
                                content.</entry>
                            <entry>Similarly, starting from the top down, entire DITA Maps can be
                                joined together to create documentation for larger publications,
                                topics can be used in multiple places in a DITA Map, elements like
                                notes, tables, lists can be reused in multiple places.<p>Useful
                                        links:<ul id="ul_zdm_tfj_bzb">
                                        <li><xref href="../presentation-reuse/introduction.dita"
                                                >DITA Reuse Strategies</xref></li>
                                        <li><xref
                                                href="https://www.oxygenxml.com/dita/styleguide/c_Content_Re-use.html"
                                                format="html" scope="external">DITA Style
                                                Guide</xref></li>
                                    </ul></p></entry>
                        </row>
                        <row>
                            <entry>Custom Validation Rules</entry>
                            <entry>We have various automatic tools (like <b>Sonar</b>) which report
                                warnings when certain best practices for writing the code are not
                                followed. This gives us more consistency as we are many people
                                working on the same code base and the code we produce needs to me
                                easily read, understood and maintained by others.</entry>
                            <entry>Using <xref href="SchematronBCs.dita" format="dita">Schematron
                                    Rules</xref> technical writers also can impose custom validation
                                rules, specific for their project. These custom validation rules
                                ensure consistency throughout the tech docs project.</entry>
                        </row>
                        <row>
                            <entry>Deleting Unused/Deprecated Content</entry>
                            <entry>All mature software products contain components which in time may
                                become unmaintained, unused. In time such components may become
                                security problems or may just contain inaccurate information. So
                                software developers spend time also in deprecating and then removing
                                these components.</entry>
                            <entry>Technical documentation also in time may contain content which is
                                no longer accurate or topics which refer to features which no longer
                                exist. So deleting unused content is also a part of a tech writer's
                                job.</entry>
                        </row>
                        <row>
                            <entry>Document my Code/Documentation</entry>
                            <entry>Most programming languages have support to add comments
                                containing documentation about what the code does, why various
                                choices were taken. This documentation gives more information which
                                could not be derived just by reading the code.</entry>
                            <entry>It's a best practice to try and keep a <xref
                                    href="styleguide.dita"/> in which various best practices and
                                architectural decisions for the documentation project are described.
                                Such a Style Guide makes on-boarding easier and in time the rules in
                                the style guide may start to be automatically applied using
                                Schematron or a terminology checker.</entry>
                        </row>
                        <row>
                            <entry>Enjoy</entry>
                            <entry>For the long term it's good to find particular aspects about your
                                job that you particularly enjoy doing. For example in my case I've
                                always been interested in investigating why certain bugs occur and
                                following through to investigate and solve them. I'm also very eager
                                to delete unused code and functionality.</entry>
                            <entry>Whether it's rewriting/correcting problems in existing content,
                                writing new content, adding custom validation rules, helping others,
                                discussing with engineers or improving the architecture of the
                                existing technical documentation project, technical writers may also
                                have preferred activities.</entry>
                        </row>
                        <row>
                            <entry>Evolve</entry>
                            <entry>We need to constantly deepen our understanding of the current
                                techniques we use, learn new techniques, new frameworks or
                                programming languages. </entry>
                            <entry>By reading various resources like the <xref
                                    href="https://www.oxygenxml.com/dita/styleguide/" format="html"
                                    scope="external">DITA Style Guide</xref>, the <xref
                                    href="https://www.oxygenxml.com/dita/1.3/specs/" format="html"
                                    scope="external">DITA 1.3 standard</xref> or the <xref
                                    href="welcome.dita">Oxygen XML Blog</xref> a technical writers
                                can deepen their understanding of the used standard, what features
                                it offers and what best practices to follow. <p>There are lots of
                                    useful resources about approaching technical documentation
                                    online like: <xref href="https://diataxis.fr/" format="html"
                                        scope="external">Diátaxis</xref>.</p><p>Sometimes technical
                                    writers also become involved in styling the published HTML or
                                    PDF outputs, in uploading the deliverables to the proper places
                                    on the web site, producing training material or receiving user
                                    feedback and integrating it back in the documentation. So they
                                    move towards scripting and being power-users.</p></entry>
                        </row>
                        <row>
                            <entry>Helping Yourself</entry>
                            <entry>When I do not know how to do something I first try to figure
                                things out on my one before asking for help. I use various internal
                                resources (our internal wiki) or external resources like Google,
                                ChatGPT, StackOverflow. I always tend to remember better the
                                solution I found if I put some effort into finding it
                                myself.</entry>
                            <entry>Overcoming obstacles by oneself is possible if the company has
                                internal wikis, internal style guides that the technical writers can
                                use. By helping ourselves in time we develop a certain In time
                                experienced writers develop a certain grit which allows us to
                                overcome daily obstacles.</entry>
                        </row>
                        <row>
                            <entry>Inversion of Control</entry>
                            <entry>Most of the times we use libraries developed by us or by others
                                to build larger projects. So our code uses other code. But there are
                                frameworks like <b>Spring</b> which have this concept of
                                    <b>inversion of control</b>. With this concept, our code does
                                not use libraries but those libraries in turn orchestrate and use
                                our code.</entry>
                            <entry>The DITA XML standard has the concept of <xref
                                    href="../keyscopes/keyscopesBlog.dita">key scopes</xref> which
                                allows key references and content key references in topics to have
                                different values depending on where in the DITA Map the topic is
                                referenced. So in a way your topics contain variable place holders
                                which may expand to different content depending on where they are
                                    used.<p>The DITA XML standard also has this concept of <xref
                                        href="../presentation-reuse/conref_push.dita">content
                                        reference push</xref>. With conref push content can be
                                    placed in a topic from the outside.</p></entry>
                        </row>
                        <row>
                            <entry>Learn by Teaching</entry>
                            <entry>Teaching is a great way to learn more about the concepts
                                yourself. You do not need to be highly experienced in a subject
                                matter in order to make small presentations in the team about it.
                                You can use such small presentations to start discussions about the
                                subject matter and gather best practices from other team members who
                                might now more about the subject matter than you do.</entry>
                            <entry>You can read for example about an aspect of a standard like DITA
                                XML that you are not using in the company like for example <xref
                                    href="../branchFilters/branchFilter.dita">branch
                                    filtering</xref> or relationship tables, make a small
                                presentation in the team and then try to start a discussion about
                                how the feature could be used in the tech docs project and what
                                problems it could solve.</entry>
                        </row>
                        <row>
                            <entry>Managing Dependencies/Linking between objects</entry>
                            <entry>The more dependencies a class, object or project has, the more
                                difficult is to use it in another context. In our work we try to
                                uncouple objects, to decrease the dependencies between the in order
                                to be able to reuse the objects in multiple contexts.</entry>
                            <entry>There are various <xref href="dita_linking_stretegies.dita"
                                    >linking strategies</xref>, the main idea being to avoid direct
                                references between topics and use instead indirect links and
                                relationship tables. This gives you more flexibility to re-use
                                topics in multiple contexts.</entry>
                        </row>
                        <row>
                            <entry>No Appreciation for Fluff</entry>
                            <entry>The written code should be as compact and easy to read as
                                possible. An application's features should again be intuitive to use
                                with an user's interface which does not present more than you need
                                to accomplish a certain task.</entry>
                            <entry>Small topics describing key concepts, small tasks describing how
                                various things can be accomplished. Precise messages, simplified
                                English, no fancy words, no thesaurus.</entry>
                        </row>
                        <row>
                            <entry>Obtaining multiple products from the same code base</entry>
                            <entry/>
                            <entry/>
                        </row>
                        <row>
                            <entry>Overview of Complex Systems</entry>
                            <entry/>
                            <entry/>
                        </row>
                        <row>
                            <entry>Pair Programming</entry>
                            <entry/>
                            <entry/>
                        </row>
                        <row>
                            <entry>Project Structure and Naming Resources</entry>
                            <entry>Experienced software developers are interested in properly naming
                                things. We try to give good names to functions, variables, packages.
                                We try to be consistent when naming things using compound names,
                                either use hyphens or use upper-lower-case sequences.</entry>
                            <entry>It makes sense for technical documentation writers to also have
                                best practices when it comes to a project's structure, how files
                                should be named, where images should be stored, how key names should
                                be given and so on.<xref
                                    href="https://github.com/oxygenxml/dita-project-best-practices"
                                    format="html" scope="external">Sample Project</xref>.</entry>
                        </row>
                        <row>
                            <entry>Project-wide Validation</entry>
                            <entry/>
                            <entry/>
                        </row>
                        <row>
                            <entry>Publishing Orchestration</entry>
                            <entry/>
                            <entry/>
                        </row>
                        <row>
                            <entry>Read the Docs</entry>
                            <entry>We learn a lot by doing, by copy pasting and reusing content from
                                other similar projects that we have. But sometimes taking the time
                                to read the documentation for the frameworks and libraries that we
                                use is really worth it.</entry>
                            <entry>By reading for example the <xref
                                    href="https://www.oxygenxml.com/dita/1.3/specs/" format="html"
                                    scope="external">DITA 1.3 standard documentation</xref> a
                                technical documentation writer might find various features that can
                                be used in their project. They might also understand certain
                                limitations in the way things work. </entry>
                        </row>
                        <row>
                            <entry>Requesting Help from Peers</entry>
                            <entry/>
                            <entry/>
                        </row>
                        <row>
                            <entry>Security</entry>
                            <entry/>
                            <entry/>
                        </row>
                        <row>
                            <entry>Styling and Colors</entry>
                            <entry/>
                            <entry/>
                        </row>
                        <row>
                            <entry>Terminology</entry>
                            <entry>There are lots of ways in which a message can be conveyed. All
                                messages presented to the end user need to have a certain style,
                                tone, use plain language.</entry>
                            <entry><xref href="checking_terminology_with_oxygen_xml_editor.dita"
                                    format="dita">Controlled terminology</xref> is also an important
                                aspect of a technical writer's job.</entry>
                        </row>
                        <row>
                            <entry>Translation</entry>
                            <entry>In general all user interface strings in an application will be
                                translated to multiple languages so we need to take this into
                                account when designing the application.</entry>
                            <entry>A DITA XML project which needs to be translated in multiple
                                languages also needs to follow a <xref
                                    href="translating_your_dita_project.dita" format="dita">sequence
                                    of best practices</xref>.</entry>
                        </row>
                        <row>
                            <entry>User's Point of View</entry>
                            <entry/>
                            <entry/>
                        </row>
                        <row>
                            <entry>Version Control</entry>
                            <entry/>
                            <entry/>
                        </row>
                        <row>
                            <entry>Working with AI tools</entry>
                            <entry/>
                            <entry/>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </p>
        <p>Writers and software engineers have lots of things in common because we are all working
            with language, we communicate in a specific language. Computer programming languages
            contain less words and are more simple than the English vocabulary but in the end we are
            all in the market of describing, expressing and building complex systems using simple
            terms.</p>
        <p>If you have feedback about these concepts and how they influence your writing, it is as
            usual welcomed.</p>
    </body>
</topic>
