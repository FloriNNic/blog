import org.gradle.api.tasks.Exec
import groovy.json.JsonSlurper

task initDOT {
  String projectDir = "."
   doLast {
   if(! new File("${projectDir}/dita-ot/oxygen-publishing-engine/").exists()){
       //https://www.oxygenxml.com/InstData/PublishingEngine/oxygen-publishing-engine.zip
       //https://archives.oxygenxml.com/Nightly/PublishingEngine/oxygen-publishing-engine.zip
       ant.get(src: 'https://www.oxygenxml.com/InstData/PublishingEngine/oxygen-publishing-engine.zip', dest: "${projectDir}/dita-ot.zip", skipexisting: 'true')
       ant.unzip(src: "${projectDir}/dita-ot.zip", dest: 'dita-ot')
       new File("${projectDir}/dita-ot/oxygen-publishing-engine/licensekey.txt").write(System.getenv( 'LICENSE_KEY' ).replaceAll("  ", "\n"))
    }
  }
}

task runTransformation(type:Exec, dependsOn: [initDOT]) {
 workingDir "${projectDir}/dita-ot/oxygen-publishing-engine/bin"
 commandLine "sh", "${projectDir}/dita-ot/oxygen-publishing-engine/bin/dita", "--output=.", "--project", "${projectDir}/../blog-project.xml"
}

task copySite(type: Copy, dependsOn: [runTransformation]) {
    from "${projectDir}/dita-ot/oxygen-publishing-engine/bin/site"
    into "${projectDir}/../site"
}

task copyResources(type: Copy) {
    from "${projectDir}/../resources/"
    into "${projectDir}/../site/resources"
}

task initValidation {
 String projectDir = "."
 doLast {
 if(! new File("${projectDir}/extracted/oxygen/").exists()){
   ant.get(src: 'https://archives.oxygenxml.com/Oxygen/Editor/InstData24.1/All/oxygen.tar.gz', dest: "${projectDir}/oxygen.tar.gz", skipexisting: 'true')
   ant.untar(src: "${projectDir}/oxygen.tar.gz", dest: "${projectDir}/extracted", compression: 'gzip')
   new File("${projectDir}/extracted/oxygen/scriptinglicensekey.txt").write(System.getenv( 'SCRIPTING_LICENSE_KEY' ).replaceAll("  ", "\n"))
  }
 }
}

task runValidation(type:Exec, dependsOn: [initValidation]) {
 workingDir "${projectDir}/extracted/oxygen"
 commandLine "sh", "${projectDir}/extracted/oxygen/scripts/validateCheckDITA.sh", "-i", "${projectDir}/../blog-project.xml", "-r", "${projectDir}/extracted/oxygen/validationReport.xml"
 ignoreExitValue true
  doLast {
        if(execResult.getExitValue() != 0) {
            println new File("${projectDir}/extracted/oxygen/validationReport.xml").text
            throw new TaskExecutionException( it,
                new Exception( "Validation failed; "
                              + "see task output for details." )
            )
        }
    }
}

task postProcessValidation(dependsOn: [runValidation]) {
 String projectDir = "."
 doLast {
    ant.replace(
      file: '${projectDir}/../../site/validationReport.xml',
      token: '<?xml version="1.0" encoding="UTF-8"?>',
      value: '<?xml-stylesheet type="text/css" href="report.css"?>'
  )
 }
}

task runAIValidation(type:Exec) {
 workingDir "${projectDir}/"
 commandLine "curl", "-v", "https://api.openai.com/v1/chat/completions", '-H', 'Content-Type: application/json', '-H', 'Authorization: Bearer ' + System.getenv( 'AI_LICENSE_KEY' ), "-d", '{"model": "gpt-4","messages": [{"role": "system","content": "You are a DITA XML technical documentation writer, skilled detecting grammar problems. If there are grammar problems in the provided DITA XML content, return a unified diff between the old content and the content with the corrected problems. If there are no grammar problems to be made, return __OK__"},{"role": "user","content": "<title>I am a developer.</title>\\n<p>Here is some problems</p>"}]}', "-o", "output.json"
 doLast {
    def result = new JsonSlurper().parse(file("output.json"))
    String content = result.choices[0].message.content;
    if(! content.equals("__OK__")){
        throw new Exception("Grammar check problems:\n" + content);
    }
 }
}

task dist(dependsOn: [copySite, copyResources])

defaultTasks 'dist'
